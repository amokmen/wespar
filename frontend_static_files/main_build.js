(()=>{var e={60:e=>{function t(e){let t="unknown_time",n="",s="",r="",o="";return e.time&&(t=new Date(1e3*parseInt(e.time,10)).toISOString().slice(11,-5)),n="observer"===e.to_sides?`*${e.id}*`:e.id,e.side&&(s=` (p${e.side})`),r=e.message,o=`<[${t}] ${n}${s}>`,e.side&&(o="1"===e.side?`<b style="color:red;">&lt;[${t}] ${n}${s}&gt;</b>`:`<b style="color:blue;">&lt;[${t}] ${n}${s}&gt;</b>`),`${o} ${r}<br>`}e.exports=function(e){const n="<h2>Metadata</h2>"+`<p>It's replay? ${e.meta.isReplay}<br>It's server replay? ${e.meta.isServerReplay}<br>Version: ${e.meta.version}</p>`;let s="";const r=e.gameSettings.addons;if(null!==r){s="<h2>Addons used</h2><p>";for(let e=0;e<r.length;e+=1){const t=r[e];s+=`* ${t.name} (${t.id}) version ${t.version}<br>`}s+="</p>"}let o="";"yes"===e.gameSettings.settings.mp_countdown&&(o=`Timer settings:<br>Init time: ${e.gameSettings.settings.mp_countdown_init_time} sec<br>Turn bonus: ${e.gameSettings.settings.mp_countdown_turn_bonus} sec<br>Reservoir: ${e.gameSettings.settings.mp_countdown_reservoir_time} sec<br>Action bonus: ${e.gameSettings.settings.mp_countdown_action_bonus} sec<br>`);const i=`<h2>Scenario info</h2><p>Map name: ${e.gameSettings.settings.mp_scenario_name}<br>Timer: <b>${e.gameSettings.settings.mp_countdown}</b><br>${o}Era: ${e.gameSettings.settings.mp_era}<br>Mode: ${e.gameSettings.settings.random_faction_mode}<br>Shuffle: ${e.gameSettings.settings.shuffle_sides}<br>Observers: ${e.gameSettings.settings.observer}<br>Saved game: ${e.gameSettings.settings.savegame}<br>Game title: ${e.gameSettings.settings.scenario}<br>Random start time: ${e.gameSettings.settings.mp_random_start_time}<br><br>Turns number: ${e.gameSettings.turns}</p>`;let a="<h2>Sides</h2>";if(null!==e.sides){let t="",n="";"yes"===e.sides[0].is_host?t="(host) ":"yes"===e.sides[1].is_host&&(n="(host) ");a+=`<p>${`${t}P${e.sides[0].side} <b>${e.sides[0].player_id}</b> (${e.sides[0].color}) with leader "${e.sides[0].type}"<br>`}${`${n}P${e.sides[1].side} <b>${e.sides[1].player_id}</b> (${e.sides[1].color}) with leader "${e.sides[1].type}"`}</p>`}let d="";return"number"==typeof e.mTime&&(d=new Date(parseInt(e.mTime,10)).toISOString().slice(0,10)),n+i+s+a+`<h2>Chat log (${d})</h2><p>(timestamps is in UTC+0)</p><p>`+function(e){let n="",s=[];const r=[];return e.forEach((e=>{r.push(e.numCurrentTurn)})),s=Array.from(new Set(r)),s.forEach((s=>{n+=`TURN #${s} START<br>`;const r=[],o=[];e.forEach((e=>{e.numCurrentTurn===s&&(e.boolIsFirstSideNowPlaying?r.push(e):o.push(e))})),n+="&nbsp;&nbsp;Side#1 start playing<br>",r.forEach((e=>{n+=`&nbsp;&nbsp;&nbsp;&nbsp;${t(e)}`})),n+="&nbsp;&nbsp;Side#1 end playing<br>",n+="&nbsp;&nbsp;Side#2 start playing<br>",o.forEach((e=>{n+=`&nbsp;&nbsp;&nbsp;&nbsp;${t(e)}`})),n+="&nbsp;&nbsp;Side#2 end playing<br><br>"})),n+="</p>",n}(e.chat)}},670:e=>{const t="version.txt";e.exports=function(){const e=new XMLHttpRequest;e.open("GET",t,!0),e.timeout=3e4,e.ontimeout=()=>{console.log(`[ERR] Request for file <version.txt> aborted by timeout ${e.timeout/1e3} sec!`)},e.send(null),e.onreadystatechange=()=>{if(4===e.readyState)if(200===e.status){const t=e.responseText;document.getElementById("bVersion").innerText=t;const n=e.getResponseHeader("last-modified"),s=new Date(n).toISOString().slice(0,10);document.getElementById("bUpdateDate").innerText=s}else 0===e.status?console.log("[ERR] Server error or timeout was reached! (no any HTTP code)"):console.log(`[ERR] Something went wrong! (HTTP Code is ${e.status})`)}}},284:(e,t,n)=>{const s=n(60);e.exports=function(e){let t=null;const n=document.querySelectorAll("input[type='checkbox']:checked"),r=[];if(n.length>0){n.forEach((e=>{r.push(e.id)}));let o=[];null!==e&&(o=e.answer.chat.filter((e=>{let t=!0;return r.forEach((n=>{e.id===n&&(t=!1)})),t})));const i=JSON.parse(JSON.stringify(e));i.answer.chat=o,t=s(i.answer)}else t=s(e.answer);document.getElementById("pServerResultOutput").innerHTML=t}},987:(e,t,n)=>{const s=n(60),r="pRequestToServerStatus",o="pServerResultOutput",i="pServerErrorOutput",a="dAllCheckBoxes",d=["Content-Type","application/json;charset=UTF-8"];e.exports=function(){document.getElementById(r).innerText="",document.getElementById(o).innerHTML="",document.getElementById(i).innerText="",document.getElementById(a).innerHTML="";const e=document.getElementById("inputTextLink").value,t=JSON.stringify({urlFileForParsing:e}),n=new XMLHttpRequest;n.open("POST","/url",!0),n.timeout=3e4,n.ontimeout=()=>{document.getElementById(r).innerText=`[ERR] Request aborted by timeout ${n.timeout/1e3} sec!`},n.setRequestHeader(d[0],d[1]),n.send(t),n.onreadystatechange=()=>{if(4!==n.readyState)return;if(200!==n.status)return 0===n.status?void(document.getElementById(r).innerText="[ERR] Error while trying to request server! (reload page, check Internet connection)"):void(document.getElementById(r).innerText=`[ERR] Something went wrong! (HTTP Code is ${n.status})`);document.getElementById(r).innerText=`[OK] Request completed! (HTTP Code is ${n.status})`;const e=JSON.parse(n.responseText);objResponseBackendGlobal=e;const t=document.querySelectorAll("[class='hidden']");t.length>0&&null===e.errorInRequest&&t.forEach((e=>{e.style.display="initial"}));const d=document.getElementById(o),l=document.getElementById(i);let u="There were no errors.";if(null!==e.errorInRequest)u=e.errorInRequest;else{null!==e.answer.errorWhileParsing&&(u=e.answer.errorWhileParsing);const t=s(e.answer);d.innerHTML=t;let n=[];if(e.answer.chat.length>=0){const t=[];e.answer.chat.forEach((e=>{void 0===e.side&&t.push(e.id)})),n=Array.from(new Set(t)),n.sort()}const r=document.getElementById(a);r.innerHTML="",n.forEach((e=>{r.innerHTML+=`<input type="checkbox" id="${e}" name="${e}" onchange="AddDelObsFromChat(objResponseBackendGlobal)" />&nbsp;<label for="${e}">${e}</label>,&nbsp;`}))}l.innerText=u},document.getElementById(r).innerText="Requesting..."}}},t={};function n(s){var r=t[s];if(void 0!==r)return r.exports;var o=t[s]={exports:{}};return e[s](o,o.exports,n),o.exports}(()=>{const e=n(284),t=n(987),s=n(670);window.RequestToBackend=t,window.AddDelObsFromChat=e;window.addEventListener("load",(()=>{document.getElementById("inputTextLink").addEventListener("keydown",(e=>{"Enter"!==e.code&&"Enter"!==e.key||(e.preventDefault(),document.getElementById("buttonForClick").click())})),s()}))})()})();